<div class="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
  <div class="w-full max-w-3xl bg-white rounded-lg shadow-lg p-6">
    <h1 class="text-3xl font-bold mb-6 text-center text-emerald-600">Spotify Player</h1>
    
    <% if !session[:spotify_user_id] %>
      <div class="text-center p-8">
        <p class="mb-4 text-lg">Sign in with your Spotify Premium account to start playing music.</p>
        <a href="/auth/spotify" class="inline-block bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-6 rounded-full">
          Sign in with Spotify
        </a>
      </div>
    <% else %>
      <!-- Search Box -->
      <div class="mb-8">
        <%= form_with url: search_path, method: :get, class: "flex items-center gap-2" do %>
          <div class="flex-grow">
            <%= text_field_tag :query, params[:query], 
                class: "w-full border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-emerald-500", 
                placeholder: "Search for songs...",
                autocomplete: "off" %>
          </div>
          <%= submit_tag "Search", class: "bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-lg" %>
        <% end %>
      </div>

      <div id="player-container" class="mb-8">
        <div id="spotify-player" class="w-full h-20 bg-gray-200 rounded mb-4"></div>
        
        <div class="flex flex-wrap justify-center gap-4 mt-4">
          <button id="prev-button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded">
            Previous
          </button>
          <button id="play-button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded">
            Play
          </button>
          <button id="pause-button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded">
            Pause
          </button>
          <button id="next-button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded">
            Next
          </button>
        </div>
      </div>
      
      <div id="now-playing" class="text-center mb-8">
        <h2 class="text-xl font-semibold mb-2">Now Playing</h2>
        <p id="current-track" class="text-gray-700">No track currently playing</p>
        <p id="device-status" class="text-sm text-gray-500 mt-2">Connecting to Spotify...</p>
      </div>
      
      <div class="text-center mt-8">
        <%= button_to logout_path, method: :get, class: "text-sm text-emerald-600 hover:text-emerald-800" do %>
          Sign out
        <% end %>
      </div>
      
      <script>
        document.addEventListener('DOMContentLoaded', () => {
          // Wait for the Spotify Web Playback SDK to be loaded
          window.onSpotifyWebPlaybackSDKReady = () => {
            const token = '<%= current_spotify_user&.access_token %>';
            
            // Create a new Spotify Player
            const player = new Spotify.Player({
              name: 'Syft Listening App',
              getOAuthToken: cb => { cb(token); },
              volume: 0.5
            });
            
            // Event listeners for player state changes
            player.addListener('ready', ({ device_id }) => {
              console.log('Ready with Device ID', device_id);
              
              // Store the device ID for the search page to use
              localStorage.setItem('spotify_device_id', device_id);
              
              // Update the device status on the page
              document.getElementById('device-status').textContent = 'Connected to Spotify';
              
              // Transfer playback to this device
              fetch('https://api.spotify.com/v1/me/player', {
                method: 'PUT',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  device_ids: [device_id],
                  play: false,
                }),
              });
            });
            
            player.addListener('not_ready', ({ device_id }) => {
              console.log('Device ID has gone offline', device_id);
              document.getElementById('device-status').textContent = 'Disconnected from Spotify';
              localStorage.removeItem('spotify_device_id');
            });
            
            player.addListener('player_state_changed', state => {
              if (state) {
                const currentTrack = state.track_window.current_track;
                document.getElementById('current-track').textContent = 
                  `${currentTrack.name} - ${currentTrack.artists.map(a => a.name).join(', ')}`;
              }
            });
            
            // Connect to the player
            player.connect();
            
            // Control buttons
            document.getElementById('play-button').addEventListener('click', () => {
              player.resume();
            });
            
            document.getElementById('pause-button').addEventListener('click', () => {
              player.pause();
            });
            
            document.getElementById('prev-button').addEventListener('click', () => {
              player.previousTrack();
            });
            
            document.getElementById('next-button').addEventListener('click', () => {
              player.nextTrack();
            });
          };
        });
      </script>
    <% end %>
  </div>
</div>
